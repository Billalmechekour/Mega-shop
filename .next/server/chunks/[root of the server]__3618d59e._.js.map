{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/user/Desktop/rayane/test/lib/prisma/index.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/user/Desktop/rayane/test/lib/auth/index.ts"],"sourcesContent":["import bcrypt from \"bcryptjs\";\r\nimport NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        // Find user by email\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: credentials.email as string },\r\n        });\r\n\r\n        if (!user) throw new Error(\"No user found!\");\r\n\r\n        // Check password\r\n        const isValid = await bcrypt.compare(\r\n          credentials.password as string,\r\n          user.password\r\n        );\r\n        if (!isValid) throw new Error(\"Invalid password!\");\r\n\r\n        // Return user object (NextAuth creates session)\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          image: user.urlImage,\r\n          role: user.role,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id!;\r\n        token.email = user.email;\r\n        token.picture = user.image;\r\n        token.role = user.role;\r\n      }\r\n      return token;\r\n    },\r\n\r\n    async session({ session, token }) {\r\n      session.user.id = token.id!;\r\n      session.user.email = token.email!;\r\n      session.user.image = token.picture;\r\n      session.user.role = token.role;\r\n      return session;\r\n    },\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,WAAW;QACT,CAAA,GAAA,4LAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,qBAAqB;gBACrB,MAAM,OAAO,MAAM,wHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAW;gBAC9C;gBAEA,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAE3B,iBAAiB;gBACjB,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAEf,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;gBAE9B,gDAAgD;gBAChD,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,OAAO,KAAK,QAAQ;oBACpB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IAED,SAAS;QACP,UAAU;IACZ;IAEA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,OAAO,GAAG,KAAK,KAAK;gBAC1B,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAChC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,OAAO;YAClC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAC9B,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/user/Desktop/rayane/test/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from \"@/lib/auth\";\r\n\r\nexport const { GET, POST } = handlers;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,sHAAA,CAAA,WAAQ","debugId":null}}]
}